/**
 * Merge ATS API
 *
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.ats.apis

import dev.merge.client.ats.models.AccountDetailsAndActions

import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

import com.fasterxml.jackson.databind.ObjectMapper

import dev.merge.client.shared.*

open class LinkedAccountsApi(
baseUrl: String = ApiClient.BASE_URL + "ats/v1",
httpClientEngine: HttpClientEngine? = null,
httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
json: ObjectMapper = ApiClient.JSON_DEFAULT,
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, json) {

    data class LinkedAccountsListRequest (
        val category: kotlin.String? = null,
        val cursor: kotlin.String? = null,
        val endUserEmailAddress: kotlin.String? = null,
        val endUserOrganizationName: kotlin.String? = null,
        val endUserOriginId: kotlin.String? = null,
        val endUserOriginIds: kotlin.String? = null,
        val id: java.util.UUID? = null,
        val ids: kotlin.String? = null,
        val includeDuplicates: kotlin.Boolean? = null,
        val integrationName: kotlin.String? = null,
        val isTestAccount: kotlin.String? = null,
        val pageSize: kotlin.Int? = null,
        val status: kotlin.String? = null
    )

    /**
    * 
    * List linked accounts for your organization.
     * @param category  (optional)
     * @param cursor The pagination cursor value. (optional)
     * @param endUserEmailAddress If provided, will only return linked accounts associated with the given email address. (optional)
     * @param endUserOrganizationName If provided, will only return linked accounts associated with the given organization name. (optional)
     * @param endUserOriginId If provided, will only return linked accounts associated with the given origin ID. (optional)
     * @param endUserOriginIds Comma-separated list of EndUser origin IDs, making it possible to specify multiple EndUsers at once. (optional)
     * @param id  (optional)
     * @param ids Comma-separated list of LinkedAccount IDs, making it possible to specify multiple LinkedAccounts at once. (optional)
     * @param includeDuplicates If &#x60;true&#x60;, will include complete production duplicates of the account specified by the &#x60;id&#x60; query parameter in the response. &#x60;id&#x60; must be for a complete production linked account. (optional)
     * @param integrationName If provided, will only return linked accounts associated with the given integration name. (optional)
     * @param isTestAccount If included, will only include test linked accounts. If not included, will only include non-test linked accounts. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param status Filter by status. Options: &#x60;COMPLETE&#x60;, &#x60;INCOMPLETE&#x60;, &#x60;RELINK_NEEDED&#x60; (optional)
     * @return PaginatedAccountDetailsAndActionsList
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun linkedAccountsList(requestModel: LinkedAccountsApi.LinkedAccountsListRequest): HttpResponse<MergePaginatedResponse<AccountDetailsAndActions>> {

        val localVariableAuthNames = listOf<String>("bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        requestModel.category?.apply { localVariableQuery["category"] = listOf("$requestModel?.category") }
        requestModel.cursor?.apply { localVariableQuery["cursor"] = listOf("$requestModel?.cursor") }
        requestModel.endUserEmailAddress?.apply { localVariableQuery["end_user_email_address"] = listOf("$requestModel?.endUserEmailAddress") }
        requestModel.endUserOrganizationName?.apply { localVariableQuery["end_user_organization_name"] = listOf("$requestModel?.endUserOrganizationName") }
        requestModel.endUserOriginId?.apply { localVariableQuery["end_user_origin_id"] = listOf("$requestModel?.endUserOriginId") }
        requestModel.endUserOriginIds?.apply { localVariableQuery["end_user_origin_ids"] = listOf("$requestModel?.endUserOriginIds") }
        requestModel.id?.apply { localVariableQuery["id"] = listOf("$requestModel?.id") }
        requestModel.ids?.apply { localVariableQuery["ids"] = listOf("$requestModel?.ids") }
        requestModel.includeDuplicates?.apply { localVariableQuery["include_duplicates"] = listOf("$requestModel?.includeDuplicates") }
        requestModel.integrationName?.apply { localVariableQuery["integration_name"] = listOf("$requestModel?.integrationName") }
        requestModel.isTestAccount?.apply { localVariableQuery["is_test_account"] = listOf("$requestModel?.isTestAccount") }
        requestModel.pageSize?.apply { localVariableQuery["page_size"] = listOf("$requestModel?.pageSize") }
        requestModel.status?.apply { localVariableQuery["status"] = listOf("$requestModel?.status") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/linked-accounts",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).wrap()
    }

}
