/**
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.hris.apis

import dev.merge.client.hris.models.Employee
import dev.merge.client.hris.models.EmployeeEndpointRequest
import dev.merge.client.hris.models.EmployeeResponse
import dev.merge.client.hris.models.IgnoreCommonModel
import dev.merge.client.hris.models.IgnoreCommonModelRequest
import dev.merge.client.hris.models.MetaResponse

import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder
import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
import io.ktor.serialization.jackson.jackson
import io.ktor.client.call.body

import com.fasterxml.jackson.databind.ObjectMapper

import dev.merge.client.shared.*

open class EmployeesApi(
baseUrl: String = ApiClient.BASE_URL + "hris/v1",
httpClientEngine: HttpClientEngine? = null,
httpClientConfig: HttpClientConfig<*>.() -> Unit = {
    install(ContentNegotiation) {
        jackson()
    }
},
json: ObjectMapper = ApiClient.JSON_DEFAULT,
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, json) {

    data class EmployeesCreateRequest (
        val employeeEndpointRequest: EmployeeEndpointRequest,
        val isDebugMode: kotlin.Boolean? = null,
        val runAsync: kotlin.Boolean? = null
    )

    data class EmployeesIgnoreCreateRequest (
        val modelId: java.util.UUID,
        val ignoreCommonModelRequest: IgnoreCommonModelRequest
    )

    data class EmployeesListRequest (
        val companyId: kotlin.String? = null,
        val createdAfter: java.time.OffsetDateTime? = null,
        val createdBefore: java.time.OffsetDateTime? = null,
        val cursor: kotlin.String? = null,
        val displayFullName: kotlin.String? = null,
        val employmentStatus: kotlin.String? = null,
        val firstName: kotlin.String? = null,
        val includeDeletedData: kotlin.Boolean? = null,
        val includeRemoteData: kotlin.Boolean? = null,
        val includeSensitiveFields: kotlin.Boolean? = null,
        val lastName: kotlin.String? = null,
        val managerId: kotlin.String? = null,
        val modifiedAfter: java.time.OffsetDateTime? = null,
        val modifiedBefore: java.time.OffsetDateTime? = null,
        val pageSize: kotlin.Int? = null,
        val payGroupId: kotlin.String? = null,
        val personalEmail: kotlin.String? = null,
        val remoteFields: kotlin.String? = null,
        val remoteId: kotlin.String? = null,
        val teamId: kotlin.String? = null,
        val workEmail: kotlin.String? = null,
        val workLocationId: kotlin.String? = null
    )

    data class EmployeesRetrieveRequest (
        val id: java.util.UUID,
        val includeRemoteData: kotlin.Boolean? = null,
        val includeSensitiveFields: kotlin.Boolean? = null,
        val remoteFields: kotlin.String? = null
    )

    /**
    * 
    * Creates an &#x60;Employee&#x60; object with the given values.
     * @param employeeEndpointRequest  
     * @param isDebugMode Whether to include debug fields (such as log file links) in the response. (optional)
     * @param runAsync Whether or not third-party updates should be run asynchronously. (optional)
     * @return EmployeeResponse
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun employeesCreate(requestModel: EmployeesApi.EmployeesCreateRequest): EmployeeResponse {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = requestModel.employeeEndpointRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        requestModel.isDebugMode?.apply { localVariableQuery["is_debug_mode"] = listOf("$requestModel?.isDebugMode") }
        requestModel.runAsync?.apply { localVariableQuery["run_async"] = listOf("$requestModel?.runAsync") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/employees",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return jsonRequest(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Ignores a specific row based on the &#x60;model_id&#x60; in the url. These records will have their properties set to null, and will not be updated in future syncs. The \&quot;reason\&quot; and \&quot;message\&quot; fields in the request body will be stored for audit purposes.
     * @param modelId  
     * @param ignoreCommonModelRequest  
     * @return IgnoreCommonModel
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun employeesIgnoreCreate(requestModel: EmployeesApi.EmployeesIgnoreCreateRequest): IgnoreCommonModel {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = requestModel.ignoreCommonModelRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/employees/ignore/{model_id}".replace("{" + "model_id" + "}", "$requestModel.modelId"),
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return jsonRequest(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns a list of &#x60;Employee&#x60; objects.
     * @param companyId If provided, will only return employees for this company. (optional)
     * @param createdAfter If provided, will only return objects created after this datetime. (optional)
     * @param createdBefore If provided, will only return objects created before this datetime. (optional)
     * @param cursor The pagination cursor value. (optional)
     * @param displayFullName If provided, will only return employees with this display name. (optional)
     * @param employmentStatus If provided, will only return employees with this employment status. (optional)
     * @param firstName If provided, will only return employees with this first name. (optional)
     * @param includeDeletedData Whether to include data that was marked as deleted by third party webhooks. (optional)
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @param includeSensitiveFields Whether to include sensitive fields (such as social security numbers) in the response. (optional)
     * @param lastName If provided, will only return employees with this last name. (optional)
     * @param managerId If provided, will only return employees for this manager. (optional)
     * @param modifiedAfter If provided, will only return objects modified after this datetime. (optional)
     * @param modifiedBefore If provided, will only return objects modified before this datetime. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param payGroupId If provided, will only return employees for this pay group (optional)
     * @param personalEmail If provided, will only return Employees with this personal email (optional)
     * @param remoteFields Which fields should be returned in non-normalized form. (optional)
     * @param remoteId The API provider&#39;s ID for the given object. (optional)
     * @param teamId If provided, will only return employees for this team. (optional)
     * @param workEmail If provided, will only return Employees with this work email (optional)
     * @param workLocationId If provided, will only return employees for this location. (optional)
     * @return PaginatedEmployeeList
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun employeesList(requestModel: EmployeesApi.EmployeesListRequest): MergePaginatedResponse<Employee> {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        requestModel.companyId?.apply { localVariableQuery["company_id"] = listOf("$requestModel?.companyId") }
        requestModel.createdAfter?.apply { localVariableQuery["created_after"] = listOf("$requestModel?.createdAfter") }
        requestModel.createdBefore?.apply { localVariableQuery["created_before"] = listOf("$requestModel?.createdBefore") }
        requestModel.cursor?.apply { localVariableQuery["cursor"] = listOf("$requestModel?.cursor") }
        requestModel.displayFullName?.apply { localVariableQuery["display_full_name"] = listOf("$requestModel?.displayFullName") }
        requestModel.employmentStatus?.apply { localVariableQuery["employment_status"] = listOf("$requestModel?.employmentStatus") }
        requestModel.firstName?.apply { localVariableQuery["first_name"] = listOf("$requestModel?.firstName") }
        requestModel.includeDeletedData?.apply { localVariableQuery["include_deleted_data"] = listOf("$requestModel?.includeDeletedData") }
        requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$requestModel?.includeRemoteData") }
        requestModel.includeSensitiveFields?.apply { localVariableQuery["include_sensitive_fields"] = listOf("$requestModel?.includeSensitiveFields") }
        requestModel.lastName?.apply { localVariableQuery["last_name"] = listOf("$requestModel?.lastName") }
        requestModel.managerId?.apply { localVariableQuery["manager_id"] = listOf("$requestModel?.managerId") }
        requestModel.modifiedAfter?.apply { localVariableQuery["modified_after"] = listOf("$requestModel?.modifiedAfter") }
        requestModel.modifiedBefore?.apply { localVariableQuery["modified_before"] = listOf("$requestModel?.modifiedBefore") }
        requestModel.pageSize?.apply { localVariableQuery["page_size"] = listOf("$requestModel?.pageSize") }
        requestModel.payGroupId?.apply { localVariableQuery["pay_group_id"] = listOf("$requestModel?.payGroupId") }
        requestModel.personalEmail?.apply { localVariableQuery["personal_email"] = listOf("$requestModel?.personalEmail") }
        requestModel.remoteFields?.apply { localVariableQuery["remote_fields"] = listOf("$requestModel?.remoteFields") }
        requestModel.remoteId?.apply { localVariableQuery["remote_id"] = listOf("$requestModel?.remoteId") }
        requestModel.teamId?.apply { localVariableQuery["team_id"] = listOf("$requestModel?.teamId") }
        requestModel.workEmail?.apply { localVariableQuery["work_email"] = listOf("$requestModel?.workEmail") }
        requestModel.workLocationId?.apply { localVariableQuery["work_location_id"] = listOf("$requestModel?.workLocationId") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/employees",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns metadata for &#x60;Employee&#x60; POSTs.
     * @return MetaResponse
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun employeesMetaPostRetrieve(): MetaResponse {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/employees/meta/post",
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

    /**
    * 
    * Returns an &#x60;Employee&#x60; object with the given &#x60;id&#x60;.
     * @param id  
     * @param includeRemoteData Whether to include the original data Merge fetched from the third-party to produce these models. (optional)
     * @param includeSensitiveFields Whether to include sensitive fields (such as social security numbers) in the response. (optional)
     * @param remoteFields Which fields should be returned in non-normalized form. (optional)
     * @return Employee
    */
    @Suppress("UNCHECKED_CAST")
    open suspend fun employeesRetrieve(requestModel: EmployeesApi.EmployeesRetrieveRequest): Employee {

        val localVariableAuthNames = listOf<String>("accountTokenAuth", "bearerAuth")

        val localVariableBody = 
                io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        requestModel.includeRemoteData?.apply { localVariableQuery["include_remote_data"] = listOf("$requestModel?.includeRemoteData") }
        requestModel.includeSensitiveFields?.apply { localVariableQuery["include_sensitive_fields"] = listOf("$requestModel?.includeSensitiveFields") }
        requestModel.remoteFields?.apply { localVariableQuery["remote_fields"] = listOf("$requestModel?.remoteFields") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/employees/{id}".replace("{" + "id" + "}", "$requestModel.id"),
        query = localVariableQuery,
        headers = localVariableHeaders
        )

        return request(
        localVariableConfig,
        localVariableBody,
        localVariableAuthNames
        ).body()
    }

}
