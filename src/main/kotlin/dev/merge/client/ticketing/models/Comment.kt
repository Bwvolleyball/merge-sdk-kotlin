/**
 * Merge Ticketing API
 *
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.merge.client.ticketing.models

import dev.merge.client.shared.RemoteData

import com.fasterxml.jackson.annotation.JsonProperty

/**
 * # The Comment Object ### Description The `Comment` object is used to represent a comment on a ticket.  ### Usage Example TODO
 *
 * @param id 
 * @param remoteId The third-party API ID of the matching object.
 * @param user 
 * @param contact 
 * @param body The comment's text body.
 * @param htmlBody The comment's text body formatted as html.
 * @param ticket 
 * @param isPrivate Whether or not the comment is internal.
 * @param remoteCreatedAt When the third party's comment was created.
 * @param remoteData 
 * @param remoteWasDeleted 
 */

data class Comment (

    @field:JsonProperty("id")
    val id: java.util.UUID? = null,

    /* The third-party API ID of the matching object. */
    @field:JsonProperty("remote_id")
    val remoteId: kotlin.String? = null,

    @field:JsonProperty("user")
    val user: java.util.UUID? = null,

    @field:JsonProperty("contact")
    val contact: java.util.UUID? = null,

    /* The comment's text body. */
    @field:JsonProperty("body")
    val body: kotlin.String? = null,

    /* The comment's text body formatted as html. */
    @field:JsonProperty("html_body")
    val htmlBody: kotlin.String? = null,

    @field:JsonProperty("ticket")
    val ticket: java.util.UUID? = null,

    /* Whether or not the comment is internal. */
    @field:JsonProperty("is_private")
    val isPrivate: kotlin.Boolean? = null,

    /* When the third party's comment was created. */
    @field:JsonProperty("remote_created_at")
    val remoteCreatedAt: java.time.OffsetDateTime? = null,

    @field:JsonProperty("remote_data")
    val remoteData: kotlin.collections.List<RemoteData>? = null,

    @field:JsonProperty("remote_was_deleted")
    val remoteWasDeleted: kotlin.Boolean? = null

)

